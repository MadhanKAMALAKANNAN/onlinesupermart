//Created by: Madhan KAMALAKANNAN,  Aug/2022
// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using onlinesupermartSQLElasticDB.Models;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity;

namespace onlinesupermartSQLElasticDB.Models
{ 
        public partial class AzureonlinesupermartDbContext :  DbContext //IdentityDbContext<IdentityUser, IdentityRole, string> //
    {
            public AzureonlinesupermartDbContext()
            {

            }

            public AzureonlinesupermartDbContext(DbContextOptions<AzureonlinesupermartDbContext> options)
                : base(options)
            {
            
            }

        public virtual DbSet<AspNetRoleClaims> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRoles> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUserTokens> AspNetUserTokens { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<Blogs> Blogs { get; set; }
            public virtual DbSet<Cart> Cart { get; set; }
            public virtual DbSet<CartDetails> CartDetails { get; set; }
            public virtual DbSet<Coupon> Coupon { get; set; }
            public virtual DbSet<Orders> Orders { get; set; }
            public virtual DbSet<OrdersDetails> OrdersDetails { get; set; }
            public virtual DbSet<Payments> Payments { get; set; }
            public virtual DbSet<PaymentsTypes> PaymentsTypes { get; set; }
            public virtual DbSet<Posts> Posts { get; set; }
            public virtual DbSet<Products> Products { get; set; }
            public virtual DbSet<ProductsCategories> ProductsCategories { get; set; }
            public virtual DbSet<ProductsReview> ProductsReview { get; set; }
            public virtual DbSet<ShippingOptions> ShippingOptions { get; set; }

            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                modelBuilder.Entity<AspNetRoleClaims>(entity =>
                {
                    entity.HasIndex(e => e.RoleId, "IX_RoleId");

                    entity.HasOne(d => d.Role)
                        .WithMany(p => p.AspNetRoleClaims)
                        .HasForeignKey(d => d.RoleId)
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_dbo.AspNetRoleClaims_dbo.AspNetRoles_RoleId");
                });

                modelBuilder.Entity<AspNetUserClaims>(entity =>
                {
                    entity.HasIndex(e => e.UserId, "IX_UserId");

                    entity.HasOne(d => d.User)
                        .WithMany(p => p.AspNetUserClaims)
                        .HasForeignKey(d => d.UserId)
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId");
                });

                modelBuilder.Entity<AspNetUserLogins>(entity =>
                {
                    entity.HasKey(e => e.UserId)
                        .HasName("PK_dbo.AspNetUserLogins");

                    entity.HasIndex(e => e.UserId, "IX_UserId");

                    entity.Property(e => e.UserId).ValueGeneratedNever();

                    entity.HasOne(d => d.User)
                        .WithOne(p => p.AspNetUserLogins)
                        .HasForeignKey<AspNetUserLogins>(d => d.UserId)
                        .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId");
                });

                modelBuilder.Entity<AspNetUserRoles>(entity =>
                {
                    entity.HasNoKey();

                    entity.HasIndex(e => e.RoleId, "IX_RoleId");

                    entity.HasIndex(e => e.UserId, "IX_UserId");

                    entity.HasOne(d => d.Role)
                        .WithMany()
                        .HasForeignKey(d => d.RoleId)
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId");

                    entity.HasOne(d => d.User)
                        .WithMany()
                        .HasForeignKey(d => d.UserId)
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId");
                });

                modelBuilder.Entity<AspNetUserTokens>(entity =>
                {
                    entity.HasKey(e => e.UserId)
                        .HasName("PK_dbo.AspNetUserTokens");

                    entity.Property(e => e.UserId).HasDefaultValueSql("(newsequentialid())");
                });

                modelBuilder.Entity<AspNetUsers>(entity =>
                {
                    entity.Property(e => e.Id).HasDefaultValueSql("(newsequentialid())");
                });

                modelBuilder.Entity<Blogs>(entity =>
                {
                    entity.HasKey(e => e.BlogId)
                        .HasName("PK_dbo.Blogs");
                });

                modelBuilder.Entity<Cart>(entity =>
                {
                    entity.Property(e => e.DateTime).HasColumnType("datetime");
                });

                modelBuilder.Entity<CartDetails>(entity =>
                {
                    entity.HasIndex(e => e.CartId, "IX_CartId");

                    entity.HasIndex(e => e.CouponId, "IX_CouponId");

                    entity.HasIndex(e => e.ProductsId, "IX_ProductsId");

                    entity.HasIndex(e => e.ShippingOptionId, "IX_ShippingOptionId");

                    entity.Property(e => e.TotalPrice).HasColumnType("decimal(18, 0)");

                    entity.HasOne(d => d.Cart)
                        .WithMany(p => p.CartDetails)
                        .HasForeignKey(d => d.CartId)
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_dbo.CartDetails_dbo.Cart_CartId");

                    entity.HasOne(d => d.Coupon)
                        .WithMany(p => p.CartDetails)
                        .HasForeignKey(d => d.CouponId)
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_dbo.CartDetails_dbo.Coupon_CouponId");

                    entity.HasOne(d => d.Products)
                        .WithMany(p => p.CartDetails)
                        .HasForeignKey(d => d.ProductsId)
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_dbo.CartDetails_dbo.Products_ProductsId");

                    entity.HasOne(d => d.ShippingOption)
                        .WithMany(p => p.CartDetails)
                        .HasForeignKey(d => d.ShippingOptionId)
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_dbo.CartDetails_dbo.ShippingOptions_ShippingOptionId");
                });

                modelBuilder.Entity<Coupon>(entity =>
                {
                    entity.Property(e => e.CouponValue).HasColumnType("decimal(18, 0)");

                    entity.Property(e => e.EndDate).HasColumnType("datetime");

                    entity.Property(e => e.StartDate).HasColumnType("datetime");
                });

                modelBuilder.Entity<Orders>(entity =>
                {
                    entity.HasIndex(e => e.UserId, "IX_UserId");

                    entity.Property(e => e.DateTime).HasColumnType("decimal(18, 0)");

                    entity.HasOne(d => d.User)
                        .WithMany(p => p.Orders)
                        .HasForeignKey(d => d.UserId)
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_dbo.Orders_dbo.AspNetUsers_UserId");
                });

                modelBuilder.Entity<OrdersDetails>(entity =>
                {
                    entity.HasIndex(e => e.OrderId, "IX_OrderId");

                    entity.HasIndex(e => e.ProductsId, "IX_ProductsId");

                    entity.Property(e => e.Qty).HasColumnType("decimal(18, 0)");

                    entity.HasOne(d => d.Order)
                        .WithMany(p => p.OrdersDetails)
                        .HasForeignKey(d => d.OrderId)
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_dbo.OrdersDetails_dbo.Orders_OrderId");

                    entity.HasOne(d => d.Products)
                        .WithMany(p => p.OrdersDetails)
                        .HasForeignKey(d => d.ProductsId)
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_dbo.OrdersDetails_dbo.Products_ProductsId");
                });

                modelBuilder.Entity<Payments>(entity =>
                {
                    entity.HasIndex(e => e.CartId, "IX_CartId");

                    entity.HasIndex(e => e.OrderId, "IX_OrderId");

                    entity.HasIndex(e => e.PaymentTypeId, "IX_PaymentTypeId");

                    entity.Property(e => e.DateTime).HasColumnType("datetime");

                    entity.Property(e => e.Payment).HasColumnType("decimal(18, 0)");

                    entity.Property(e => e.Status).IsRequired();

                    entity.HasOne(d => d.Cart)
                        .WithMany(p => p.Payments)
                        .HasForeignKey(d => d.CartId)
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_dbo.Payments_dbo.Cart_CartId");

                    entity.HasOne(d => d.Order)
                        .WithMany(p => p.Payments)
                        .HasForeignKey(d => d.OrderId)
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_dbo.Payments_dbo.Orders_OrderId");

                    entity.HasOne(d => d.PaymentType)
                        .WithMany(p => p.Payments)
                        .HasForeignKey(d => d.PaymentTypeId)
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_dbo.Payments_dbo.PaymentsTypes_PaymentTypeId");
                });

                modelBuilder.Entity<PaymentsTypes>(entity =>
                {
                    entity.Property(e => e.PaymentType).IsRequired();
                });

                modelBuilder.Entity<Posts>(entity =>
                {
                    entity.HasKey(e => e.PostId)
                        .HasName("PK_dbo.Posts");

                    entity.HasIndex(e => e.BlogId, "IX_BlogId");

                    entity.HasOne(d => d.Blog)
                        .WithMany(p => p.Posts)
                        .HasForeignKey(d => d.BlogId)
                        .HasConstraintName("FK_dbo.Posts_dbo.Blogs_BlogId");
                });

                modelBuilder.Entity<Products>(entity =>
                {
                    entity.HasIndex(e => e.ProductsCategoriesId, "IX_ProductsCategoriesId");

                    entity.Property(e => e.Price).HasColumnType("decimal(18, 0)");

                    entity.HasOne(d => d.ProductsCategories)
                        .WithMany(p => p.Products)
                        .HasForeignKey(d => d.ProductsCategoriesId)
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_dbo.Products_dbo.ProductsCategories_ProductsCategoriesId");
                });

                modelBuilder.Entity<ProductsReview>(entity =>
                {
                    entity.HasIndex(e => e.ProductsId, "IX_ProductsId");

                    entity.HasIndex(e => e.UserId, "IX_UserId");

                    entity.HasOne(d => d.Products)
                        .WithMany(p => p.ProductsReview)
                        .HasForeignKey(d => d.ProductsId)
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_dbo.ProductsReview_dbo.Products_ProductsId");

                    entity.HasOne(d => d.User)
                        .WithMany(p => p.ProductsReview)
                        .HasForeignKey(d => d.UserId)
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_dbo.ProductsReview_dbo.AspNetUsers_UserId");
                });

                modelBuilder.Entity<ShippingOptions>(entity =>
                {
                    entity.Property(e => e.ShippingCost).HasColumnType("decimal(18, 0)");
                });
            base.OnModelCreating(modelBuilder);
            //OnModelCreatingPartial(modelBuilder);
            }

            partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
        }
    }

 