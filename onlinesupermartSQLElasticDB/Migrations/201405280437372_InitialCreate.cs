// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

// <auto-generated />

//Modified:  Madhan KAMALAKANNAN On: 06/10/2022

namespace onlinesupermartSQLElasticDB.Migrations
{
    using onlinesupermartSQLElasticDB.Models;
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Migrations;
    using System.Data.Entity.Migrations.Model;
    using System.Data.Entity.Migrations.Sql;
    using System.Data.Entity.SqlServer;
    using System.Reflection;
    using System.Security.Policy;

    public partial class InitialCreate : DbMigration
    {
      
        public override void Up()
        {
            CreateTable("dbo.Blogs",
             c => new
             {
                 BlogId = c.Int(nullable: false,identity: true),// defaultValue:0),//
                 Name = c.String()
             }).PrimaryKey(t => t.BlogId);
            //AddColumn("dbo.Blogs", "Rating", c => c.Int(nullable: false, defaultValue: 4));
            CreateTable("dbo.Posts",
                c => new
                {
                    PostId = c.Int(nullable: false, identity: true),
                    Title = c.String(),
                    Content = c.String(),
                    BlogId = c.Int(nullable: true)
                }).PrimaryKey(t => t.PostId).ForeignKey("dbo.Blogs", t => t.BlogId, cascadeDelete: true).Index(t => t.BlogId);

            //***************************************************************************************
            CreateTable("dbo.AspNetRoles",
              c => new
              {
                  Id = c.Int(nullable: false, identity: true),
                  Name = c.String(),
                  NormalizedUserName = c.String(),
                  ConcurrencyStamp = c.String()
              }).PrimaryKey(t => t.Id);

            CreateTable("dbo.AspNetRoleClaims",
              c => new
              {
                  Id = c.Int(nullable: false, identity: true),
                  RoleId = c.Int(nullable: true, identity: false),
                  ClaimType = c.String(),
                  ClaimValue = c.String()
              }).PrimaryKey(t => t.Id).ForeignKey("dbo.AspNetRoles", t => t.RoleId, cascadeDelete: true).Index(t => t.RoleId);
            CreateTable("dbo.AspNetUsers",
          c => new
          {
              Id = c.Guid(nullable: false, identity: true),

              UserName = c.String(),
              NormalizedUserName = c.String(),
              Email = c.String(),
              NormalizedEmail = c.String(),
              EmailConfirmed = c.Boolean(),
              PasswordHash = c.String(),
              SecurityStamp = c.String(),
              ConcurrencyStamp = c.String(),
              PhoneNumber = c.String(),
              PhoneNumberConfirmed = c.Boolean(),
              TwoFactorEnabled = c.Boolean(),
              LockoutEnd = c.String(),
              LockoutEnabled = c.Boolean(),
              AccessFailedCount = c.Int()
          }).PrimaryKey(t => t.Id);

            CreateTable("dbo.AspNetUserClaims",
             c => new
             {
                 Id = c.Int(nullable: false, identity: true),
                 UserId = c.Guid(nullable: true, identity: false),
                 ClaimType = c.String(),
                 ClaimValue = c.String()
             }).PrimaryKey(t => t.Id).ForeignKey("dbo.AspNetUsers", t => t.UserId, cascadeDelete: true).Index(t => t.UserId);


            CreateTable("dbo.AspNetUserLogins",
              c => new
              {
                  LoginProvider = c.String(),
                  ProviderKey = c.String(),
                  ProviderDisplayName = c.String(),
                  UserId = c.Guid(nullable: false, identity: true)
              }).PrimaryKey(t => t.UserId).ForeignKey("dbo.AspNetUsers", t => t.UserId, cascadeDelete: true).Index(t => t.UserId);

            CreateTable("dbo.AspNetUserTokens",
              c => new
              {
                  UserId = c.Guid(nullable: false, identity: true),
                  LoginProvider = c.String(),
                  Name = c.String(),
                  Value = c.String(),

              }).PrimaryKey(t => t.UserId);

            CreateTable("dbo.AspNetUserRoles",
             c => new
             {
                 UserId = c.Guid(nullable: false, identity: false),
                 RoleId = c.Int(nullable: false, identity: false),

             }).ForeignKey("dbo.AspNetRoles", t => t.RoleId, cascadeDelete: true).Index(t => t.RoleId).ForeignKey("dbo.AspNetUsers", t => t.UserId, cascadeDelete: true).Index(t => t.UserId);


            //***************************************************************************************

            CreateTable("dbo.Coupon",
              c => new
              {
                  Id = c.Int(nullable: false, identity: true),
                  CouponName = c.Int(nullable: true, identity: false),
                  CouponValue = c.Decimal(nullable: false),
                  StartDate = c.DateTime(),
                  EndDate = c.DateTime()

              }).PrimaryKey(t => t.Id);

            CreateTable("dbo.Orders",
                 c => new
                 {
                     Id = c.Int(nullable: false, identity: true),
                     UserId = c.Guid(nullable: true, identity: false),
                     DateTime = c.Decimal(nullable: false)                

                 }).PrimaryKey(t => t.Id).ForeignKey("dbo.AspNetUsers", t => t.UserId, cascadeDelete: true).Index(t => t.UserId);
            CreateTable("dbo.ProductsCategories",
             c => new
             {
                 Id = c.Int(nullable: false, identity: true),
                 ParentId = c.Int(nullable: true, identity: false),
                 CategoryDesc = c.String(),
                 CategoryName = c.String(),
                 NavUrl = c.String()

             }).PrimaryKey(t => t.Id);

            CreateTable("dbo.Products",
                c => new
                {
                    Id = c.Int(nullable: false, identity: true),
                    ProductsCategoriesId = c.Int(nullable: true, identity: false),
                    Name = c.String(),
                    Description = c.String(),
                    Price = c.Decimal(),
                    ProductsPic = c.String(),
                    ActivationCodes = c.String(),
                    ShowtoSale = c.String(),
                    Quantity = c.Int()

                }).PrimaryKey(t => t.Id).ForeignKey("dbo.ProductsCategories", t => t.ProductsCategoriesId, cascadeDelete: true).Index(t => t.ProductsCategoriesId);

            CreateTable("dbo.OrdersDetails",
              c => new
              {
                  Id = c.Int(nullable: false, identity: true),
                  OrderId = c.Int(nullable: true, identity: false),
                  ProductsId = c.Int(nullable: true, identity: false),
                  Qty = c.Decimal(nullable: false)

              }).PrimaryKey(t => t.Id).ForeignKey("dbo.Products", t => t.ProductsId, cascadeDelete: true).Index(t => t.ProductsId).ForeignKey("dbo.Orders", t => t.OrderId, cascadeDelete: true)
                 .Index(t => t.OrderId);


            CreateTable("dbo.PaymentsTypes",
              c => new
              {
                  Id = c.Int(nullable: false, identity: true),
                  PaymentType = c.String(nullable: false)
              }).PrimaryKey(t => t.Id);
            CreateTable("dbo.Cart",
              c => new
              {
                  Id = c.Int(nullable: false, identity: true),
                  UserId = c.Guid(nullable: true, identity: false),
                  DateTime = c.DateTime()

              }).PrimaryKey(t => t.Id);
            CreateTable("dbo.Payments",
              c => new
              {
                  Id = c.Int(nullable: false, identity: true),
                  PaymentTypeId = c.Int(nullable: true, identity: false),
                  OrderId = c.Int(nullable: true, identity: false),
                  CartId = c.Int(nullable: true, identity: false),
                  Payment = c.Decimal(),
                  Status = c.String(nullable: false),
                  DateTime = c.DateTime()

              }).PrimaryKey(t => t.Id).ForeignKey("dbo.PaymentsTypes", t => t.PaymentTypeId, cascadeDelete: true).Index(t => t.PaymentTypeId).ForeignKey("dbo.Orders", t => t.OrderId, cascadeDelete: true)
                 .Index(t => t.OrderId).ForeignKey("dbo.Cart", t => t.CartId, cascadeDelete: true).Index(t => t.CartId);

            CreateTable("dbo.ShippingOptions",
              c => new
              {
                  Id = c.Int(nullable: false, identity: true),
                  ShippingOptionDesc = c.String(),
                  ShippingOption = c.String(),
                  ShippingCost = c.Decimal(),
                  ShippingDestinationCountry = c.String(),
                  ShippingDestinationState = c.String(),
                  ShippingDetinationOtherDetails = c.String()
              }).PrimaryKey(t => t.Id);

          
            //.ForeignKey("dbo.AspNetUsers", t => t.UserId, cascadeDelete: true)
            //.Index(t => t.UserId);

            CreateTable("dbo.CartDetails",
                c => new
                {
                    Id = c.Int(nullable: false, identity: true),
                    CartId = c.Int(nullable: true, identity: false),
                    ProductsId = c.Int(nullable: true, identity: false),
                    ShippingOptionId = c.Int(nullable: true, identity: false),
                    CouponId = c.Int(nullable: true, identity: false),
                    TotalPrice = c.Decimal(),
                    Qty = c.Int()

                }).PrimaryKey(t => t.Id).ForeignKey("dbo.Cart", t => t.CartId, cascadeDelete: true).Index(t => t.CartId).ForeignKey("dbo.Products", t => t.ProductsId, cascadeDelete: true)
                 .Index(t => t.ProductsId).ForeignKey("dbo.Coupon", t => t.CouponId, cascadeDelete: true).Index(t => t.CouponId).ForeignKey("dbo.ShippingOptions", t => t.ShippingOptionId, cascadeDelete: true)
                 .Index(t => t.ShippingOptionId);
           
            CreateTable("dbo.ProductsReview",
               c => new
               {
                   Id = c.Int(nullable: false, identity: true),
                   ProductsId = c.Int(nullable: true, identity: false),
                   Review = c.String(),
                   UserId = c.Guid(nullable: true),
                   Rating = c.String(),
                   UserName = c.String()

               }).PrimaryKey(t => t.Id).ForeignKey("dbo.Products", t => t.ProductsId, cascadeDelete: true).Index(t => t.ProductsId).ForeignKey("dbo.AspNetUsers", t => t.UserId, cascadeDelete: true)
                 .Index(t => t.UserId);

          
 
        }
       
        public override void Down()
        {
          

            DropForeignKey("dbo.AspNetRoles", "RoleId", "dbo.AspNetUserRoles");
            DropIndex("dbo.AspNetRoles", new[] { "RoleId" });
            DropForeignKey("dbo.AspNetUsers", "UserId", "dbo.AspNetUserRoles");
            DropIndex("dbo.AspNetUsers", new[] { "UserId" });


            DropForeignKey("dbo.Products", "ProductsId", "dbo.ProductsReview");
            DropIndex("dbo.Products", new[] { "ProductsId" });
            DropForeignKey("dbo.AspNetUsers", "UserId", "dbo.ProductsReview");
            DropIndex("dbo.AspNetUsers", new[] { "UserId" });
          


            DropForeignKey("dbo.ProductsCategories", "ProductsCategoriesId", "dbo.Proucts");
            DropIndex("dbo.Proucts", new[] { "ProductsCategoriesId" });
           
            DropForeignKey("dbo.Cart", "CartId", "dbo.CartDetails");
            DropIndex("dbo.Cart", new[] { "CartId" });

            DropForeignKey("dbo.Products", "ProductsId", "dbo.CartDetails");
            DropIndex("dbo.Products", new[] { "ProductsId" });

            DropForeignKey("dbo.Coupon", "CouponId", "dbo.CartDetails");
            DropIndex("dbo.Coupon", new[] { "CouponId" });

            DropForeignKey("dbo.ShippingOptions", "ShippingOptionsId", "dbo.CartDetails");
            DropIndex("dbo.ShippingOptions", new[] { "ShippingOptionsId" });
             

            DropForeignKey("dbo.PaymentsTypes", "PaymentsTypesId", "dbo.Payments");
            DropIndex("dbo.PaymentsTypes", new[] { "PaymentsTypesId" });
            DropForeignKey("dbo.Orders", "OrderId", "dbo.Payments");
            DropIndex("dbo.Orders", new[] { "OrderId" });
            DropForeignKey("dbo.Cart", "CartId", "dbo.Payments");
            DropIndex("dbo.Cart", new[] { "CartId" });
        
         

            DropForeignKey("dbo.AspNetUsers", "UserId", "dbo.Orders");
            DropIndex("dbo.AspNetUsers", new[] { "UserId" });

            DropForeignKey("dbo.Products", "ProductsId", "dbo.OrdersDetails");
            DropIndex("dbo.Products", new[] { "ProductsId" });

            DropForeignKey("dbo.Orders", "OrderId", "dbo.OrdersDetails");
            DropIndex("dbo.Orders", new[] { "OrderId" });



            DropForeignKey("dbo.AspNetRoles", "RoleId", "dbo.AspNetRoleClaims");
            DropIndex("dbo.AspNetRoles", new[] { "RoleId" });


            DropForeignKey("dbo.AspNetUsers", "RUserIdoleId", "dbo.AspNetUserClaims");
            DropIndex("dbo.AspNetUsers", new[] { "UserId" });

            DropForeignKey("dbo.AspNetUsers", "RoleId", "dbo.AspNetUserLogins");
            DropIndex("dbo.AspNetUsers", new[] { "RoleId" });

            DropForeignKey("dbo.Cart", "CartId", "dbo.CartDetails");
            DropIndex("dbo.Cart", new[] { "CartId" });
            DropForeignKey("dbo.Products", "ProductsId", "dbo.CartDetails");
            DropIndex("dbo.Products", new[] { "ProductsId" });
            DropForeignKey("dbo.Coupon", "CouponId", "dbo.CartDetails");
            DropIndex("dbo.Coupon", new[] { "CouponId" });
            DropForeignKey("dbo.ShippingOptions", "ShippingOptionId", "dbo.CartDetails");
            DropIndex("dbo.ShippingOptions", new[] { "ShippingOptionId" }); 


            DropTable("dbo.Coupon");
            DropTable("dbo.Cart");
            DropTable("dbo.CartDetails");         
  
            DropTable("dbo.AspNetUsers");
            DropTable("dbo.AspNetRoles");
            DropTable("dbo.AspNetRoleClaims");
            DropTable("dbo.AspNetUserClaims");
            DropTable("dbo.AspNetUserLogins");
            DropTable("dbo.AspNetUserTokens");
            DropTable("dbo.AspNetUserRoles");
            DropTable("dbo.ProductsReview");
            DropTable("dbo.Products");
            DropTable("dbo.ProductsCategories");
            DropTable("dbo.Payments");
            DropTable("dbo.PaymentsTypes");
            DropTable("dbo.Orders");
            DropTable("dbo.OrdersDetails");
            DropTable("dbo.ShippingOptions");


        }

        public override string ToString()
        {
            return base.ToString();
        }

        public override bool Equals(object obj)
        {
            return base.Equals(obj);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }
}
